/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package at.fhtw.swkom.paperless.controller;

import at.fhtw.swkom.paperless.services.dto.AckTasks200Response;
import at.fhtw.swkom.paperless.services.dto.AckTasksRequest;
import at.fhtw.swkom.paperless.services.dto.BulkEditRequest;
import at.fhtw.swkom.paperless.services.dto.CreateCorrespondentRequest;
import at.fhtw.swkom.paperless.services.dto.CreateDocumentType200Response;
import at.fhtw.swkom.paperless.services.dto.CreateGroupRequest;
import at.fhtw.swkom.paperless.services.dto.CreateSavedViewsRequest;
import at.fhtw.swkom.paperless.services.dto.CreateStoragePath200Response;
import at.fhtw.swkom.paperless.services.dto.CreateStoragePathRequest;
import at.fhtw.swkom.paperless.services.dto.CreateTag200Response;
import at.fhtw.swkom.paperless.services.dto.CreateTagRequest;
import at.fhtw.swkom.paperless.services.dto.CreateUISettings200Response;
import at.fhtw.swkom.paperless.services.dto.CreateUISettingsRequest;
import at.fhtw.swkom.paperless.services.dto.CreateUserRequest;
import org.springframework.format.annotation.DateTimeFormat;
import at.fhtw.swkom.paperless.services.dto.GetCorrespondents200Response;
import at.fhtw.swkom.paperless.services.dto.GetDocument200Response;
import at.fhtw.swkom.paperless.services.dto.GetDocumentMetadata200Response;
import at.fhtw.swkom.paperless.services.dto.GetDocumentSuggestions200Response;
import at.fhtw.swkom.paperless.services.dto.GetDocumentTypes200Response;
import at.fhtw.swkom.paperless.services.dto.GetDocuments200Response;
import at.fhtw.swkom.paperless.services.dto.GetGroups200Response;
import at.fhtw.swkom.paperless.services.dto.GetSavedViews200Response;
import at.fhtw.swkom.paperless.services.dto.GetStoragePaths200Response;
import at.fhtw.swkom.paperless.services.dto.GetTags200Response;
import at.fhtw.swkom.paperless.services.dto.GetTasks200ResponseInner;
import at.fhtw.swkom.paperless.services.dto.GetUISettings200Response;
import at.fhtw.swkom.paperless.services.dto.GetUsers200Response;
import at.fhtw.swkom.paperless.services.dto.GetUsers200ResponseResultsInner;
import java.time.OffsetDateTime;
import at.fhtw.swkom.paperless.services.dto.SelectionData200Response;
import at.fhtw.swkom.paperless.services.dto.SelectionDataRequest;
import at.fhtw.swkom.paperless.services.dto.Statistics200Response;
import at.fhtw.swkom.paperless.services.dto.UpdateCorrespondent200Response;
import at.fhtw.swkom.paperless.services.dto.UpdateCorrespondentRequest;
import at.fhtw.swkom.paperless.services.dto.UpdateDocument200Response;
import at.fhtw.swkom.paperless.services.dto.UpdateDocumentRequest;
import at.fhtw.swkom.paperless.services.dto.UpdateDocumentType200Response;
import at.fhtw.swkom.paperless.services.dto.UpdateDocumentTypeRequest;
import at.fhtw.swkom.paperless.services.dto.UpdateGroup200Response;
import at.fhtw.swkom.paperless.services.dto.UpdateGroupRequest;
import at.fhtw.swkom.paperless.services.dto.UpdateStoragePath200Response;
import at.fhtw.swkom.paperless.services.dto.UpdateStoragePathRequest;
import at.fhtw.swkom.paperless.services.dto.UpdateTag200Response;
import at.fhtw.swkom.paperless.services.dto.UpdateTagRequest;
import at.fhtw.swkom.paperless.services.dto.UpdateUserRequest;
import at.fhtw.swkom.paperless.services.dto.UserInfo;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;

import java.util.List;

import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Tasks", description = "the Tasks API")
public interface PaperlessApi {

    /**
     * POST /api/acknowledge_tasks
     *
     * @param ackTasksRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "ackTasks",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AckTasks200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/acknowledge_tasks",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<AckTasks200Response>> ackTasks(
        @Parameter(name = "AckTasksRequest", description = "") @Valid @RequestBody(required = false) Mono<AckTasksRequest> ackTasksRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"result\" : 0 }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(ackTasksRequest).then(Mono.empty());

    }


    /**
     * GET /api
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "apiGet",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api"
    )
    
    default Mono<ResponseEntity<Void>> apiGet(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /api/search/autocomplete
     *
     * @param term  (optional)
     * @param limit  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "autoComplete",
        tags = { "Search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/search/autocomplete",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<Flux<String>>> autoComplete(
        @Parameter(name = "term", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "term", required = false) String term,
        @Parameter(name = "limit", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "[ \"\", \"\" ]";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * POST /api/documents/bulk_edit
     *
     * @param bulkEditRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "bulkEdit",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/documents/bulk_edit",
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<Void>> bulkEdit(
        @Parameter(name = "BulkEditRequest", description = "") @Valid @RequestBody(required = false) Mono<BulkEditRequest> bulkEditRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(bulkEditRequest).then(Mono.empty());

    }


    /**
     * POST /api/correspondents
     *
     * @param createCorrespondentRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "createCorrespondent",
        tags = { "Correspondents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateCorrespondentRequest.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/correspondents",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<CreateCorrespondentRequest>> createCorrespondent(
        @Parameter(name = "CreateCorrespondentRequest", description = "") @Valid @RequestBody(required = false) Mono<CreateCorrespondentRequest> createCorrespondentRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"owner\" : 6, \"matching_algorithm\" : 0, \"is_insensitive\" : true, \"name\" : \"name\", \"match\" : \"match\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(createCorrespondentRequest).then(Mono.empty());

    }


    /**
     * POST /api/document_types
     *
     * @param createCorrespondentRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "createDocumentType",
        tags = { "DocumentTypes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateDocumentType200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/document_types",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<CreateDocumentType200Response>> createDocumentType(
        @Parameter(name = "CreateCorrespondentRequest", description = "") @Valid @RequestBody(required = false) Mono<CreateCorrespondentRequest> createCorrespondentRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"owner\" : 1, \"matching_algorithm\" : 6, \"user_can_change\" : true, \"is_insensitive\" : true, \"name\" : \"name\", \"match\" : \"match\", \"id\" : 0, \"slug\" : \"slug\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(createCorrespondentRequest).then(Mono.empty());

    }


    /**
     * POST /api/groups
     *
     * @param createGroupRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "createGroup",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/groups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<Object>> createGroup(
        @Parameter(name = "CreateGroupRequest", description = "") @Valid @RequestBody(required = false) Mono<CreateGroupRequest> createGroupRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(createGroupRequest).then(Mono.empty());

    }


    /**
     * POST /api/saved_views
     *
     * @param createSavedViewsRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "createSavedViews",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/saved_views",
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<Void>> createSavedViews(
        @Parameter(name = "CreateSavedViewsRequest", description = "") @Valid @RequestBody(required = false) Mono<CreateSavedViewsRequest> createSavedViewsRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(createSavedViewsRequest).then(Mono.empty());

    }


    /**
     * POST /api/storage_paths
     *
     * @param createStoragePathRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "createStoragePath",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateStoragePath200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/storage_paths",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<CreateStoragePath200Response>> createStoragePath(
        @Parameter(name = "CreateStoragePathRequest", description = "") @Valid @RequestBody(required = false) Mono<CreateStoragePathRequest> createStoragePathRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"owner\" : 1, \"path\" : \"path\", \"matching_algorithm\" : 6, \"user_can_change\" : true, \"is_insensitive\" : true, \"name\" : \"name\", \"match\" : \"match\", \"id\" : 0, \"slug\" : \"slug\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(createStoragePathRequest).then(Mono.empty());

    }


    /**
     * POST /api/tags
     *
     * @param createTagRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "createTag",
        tags = { "Tags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateTag200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/tags",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<CreateTag200Response>> createTag(
        @Parameter(name = "CreateTagRequest", description = "") @Valid @RequestBody(required = false) Mono<CreateTagRequest> createTagRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"owner\" : 1, \"matching_algorithm\" : 6, \"user_can_change\" : true, \"color\" : \"color\", \"is_insensitive\" : true, \"name\" : \"name\", \"match\" : \"match\", \"id\" : 0, \"text_color\" : \"text_color\", \"is_inbox_tag\" : true, \"slug\" : \"slug\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(createTagRequest).then(Mono.empty());

    }


    /**
     * POST /api/ui_settings
     *
     * @param createUISettingsRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "createUISettings",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateUISettings200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/ui_settings",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<CreateUISettings200Response>> createUISettings(
        @Parameter(name = "CreateUISettingsRequest", description = "") @Valid @RequestBody(required = false) Mono<CreateUISettingsRequest> createUISettingsRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"success\" : true }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(createUISettingsRequest).then(Mono.empty());

    }


    /**
     * POST /api/users
     *
     * @param createUserRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "createUser",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetUsers200ResponseResultsInner.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<GetUsers200ResponseResultsInner>> createUser(
        @Parameter(name = "CreateUserRequest", description = "") @Valid @RequestBody(required = false) Mono<CreateUserRequest> createUserRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"is_active\" : true, \"is_superuser\" : true, \"user_permissions\" : [ \"\", \"\" ], \"is_staff\" : true, \"last_name\" : \"last_name\", \"groups\" : [ \"\", \"\" ], \"password\" : \"password\", \"id\" : 5, \"date_joined\" : \"date_joined\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"username\" : \"username\", \"inherited_permissions\" : [ \"inherited_permissions\", \"inherited_permissions\" ] }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(createUserRequest).then(Mono.empty());

    }


    /**
     * DELETE /api/correspondents/{id}
     *
     * @param id  (required)
     * @return Success (status code 204)
     */
    @Operation(
        operationId = "deleteCorrespondent",
        tags = { "Correspondents" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/correspondents/{id}"
    )
    
    default Mono<ResponseEntity<Void>> deleteCorrespondent(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * DELETE /api/documents/{id}
     *
     * @param id  (required)
     * @return Success (status code 204)
     */
    @Operation(
        operationId = "deleteDocument",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/documents/{id}"
    )
    
    default Mono<ResponseEntity<Void>> deleteDocument(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * DELETE /api/document_types/{id}
     *
     * @param id  (required)
     * @return Success (status code 204)
     */
    @Operation(
        operationId = "deleteDocumentType",
        tags = { "DocumentTypes" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/document_types/{id}"
    )
    
    default Mono<ResponseEntity<Void>> deleteDocumentType(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * DELETE /api/groups/{id}
     *
     * @param id  (required)
     * @return Success (status code 204)
     */
    @Operation(
        operationId = "deleteGroup",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/groups/{id}"
    )
    
    default Mono<ResponseEntity<Void>> deleteGroup(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * DELETE /api/storage_paths/{id}
     *
     * @param id  (required)
     * @return Success (status code 204)
     */
    @Operation(
        operationId = "deleteStoragePath",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/storage_paths/{id}"
    )
    
    default Mono<ResponseEntity<Void>> deleteStoragePath(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * DELETE /api/tags/{id}
     *
     * @param id  (required)
     * @return Success (status code 204)
     */
    @Operation(
        operationId = "deleteTag",
        tags = { "Tags" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/tags/{id}"
    )
    
    default Mono<ResponseEntity<Void>> deleteTag(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * DELETE /api/users/{id}
     *
     * @param id  (required)
     * @return Success (status code 204)
     */
    @Operation(
        operationId = "deleteUser",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/users/{id}"
    )
    
    default Mono<ResponseEntity<Void>> deleteUser(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /api/documents/{id}/download
     *
     * @param id  (required)
     * @param original  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "downloadDocument",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/pdf", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/documents/{id}/download",
        produces = { "application/pdf" }
    )
    
    default Mono<ResponseEntity<org.springframework.core.io.Resource>> downloadDocument(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "original", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "original", required = false) Boolean original,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /api/correspondents
     *
     * @param page  (optional)
     * @param fullPerms  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getCorrespondents",
        tags = { "Correspondents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetCorrespondents200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/correspondents",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<GetCorrespondents200Response>> getCorrespondents(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "full_perms", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "full_perms", required = false) Boolean fullPerms,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"next\" : 6, \"all\" : [ 5, 5 ], \"previous\" : 1, \"count\" : 0, \"results\" : [ { \"owner\" : 9, \"matching_algorithm\" : 2, \"document_count\" : 7, \"is_insensitive\" : true, \"permissions\" : { \"view\" : { \"groups\" : [ \"\", \"\" ], \"users\" : [ \"\", \"\" ] }, \"change\" : { \"groups\" : [ \"\", \"\" ], \"users\" : [ \"\", \"\" ] } }, \"name\" : \"name\", \"match\" : \"match\", \"id\" : 5, \"last_correspondence\" : \"last_correspondence\", \"slug\" : \"slug\" }, { \"owner\" : 9, \"matching_algorithm\" : 2, \"document_count\" : 7, \"is_insensitive\" : true, \"permissions\" : { \"view\" : { \"groups\" : [ \"\", \"\" ], \"users\" : [ \"\", \"\" ] }, \"change\" : { \"groups\" : [ \"\", \"\" ], \"users\" : [ \"\", \"\" ] } }, \"name\" : \"name\", \"match\" : \"match\", \"id\" : 5, \"last_correspondence\" : \"last_correspondence\", \"slug\" : \"slug\" } ] }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /api/documents/{id}
     *
     * @param id  (required)
     * @param page  (optional)
     * @param fullPerms  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getDocument",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetDocument200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/documents/{id}",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<GetDocument200Response>> getDocument(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "full_perms", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "full_perms", required = false) Boolean fullPerms,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"owner\" : 7, \"archive_serial_number\" : 2, \"notes\" : [ { \"note\" : \"note\", \"created\" : \"created\", \"document\" : 1, \"id\" : 7, \"user\" : 1 }, { \"note\" : \"note\", \"created\" : \"created\", \"document\" : 1, \"id\" : 7, \"user\" : 1 } ], \"added\" : \"added\", \"created\" : \"created\", \"title\" : \"title\", \"content\" : \"content\", \"tags\" : [ 5, 5 ], \"storage_path\" : 5, \"permissions\" : { \"view\" : { \"groups\" : [ 3, 3 ], \"users\" : [ 9, 9 ] }, \"change\" : { \"groups\" : [ 3, 3 ], \"users\" : [ 9, 9 ] } }, \"archived_file_name\" : \"archived_file_name\", \"modified\" : \"modified\", \"correspondent\" : 6, \"original_file_name\" : \"original_file_name\", \"id\" : 0, \"created_date\" : \"created_date\", \"document_type\" : 1 }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /api/documents/{id}/metadata
     *
     * @param id  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getDocumentMetadata",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetDocumentMetadata200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/documents/{id}/metadata",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<GetDocumentMetadata200Response>> getDocumentMetadata(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"archive_size\" : 6, \"archive_metadata\" : [ { \"prefix\" : \"prefix\", \"namespace\" : \"namespace\", \"value\" : \"value\", \"key\" : \"key\" }, { \"prefix\" : \"prefix\", \"namespace\" : \"namespace\", \"value\" : \"value\", \"key\" : \"key\" } ], \"original_metadata\" : [ \"\", \"\" ], \"original_filename\" : \"original_filename\", \"original_mime_type\" : \"original_mime_type\", \"archive_checksum\" : \"archive_checksum\", \"original_checksum\" : \"original_checksum\", \"lang\" : \"lang\", \"media_filename\" : \"media_filename\", \"has_archive_version\" : true, \"archive_media_filename\" : \"archive_media_filename\", \"original_size\" : 0 }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /api/documents/{id}/preview
     *
     * @param id  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getDocumentPreview",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/pdf", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/documents/{id}/preview",
        produces = { "application/pdf" }
    )
    
    default Mono<ResponseEntity<org.springframework.core.io.Resource>> getDocumentPreview(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /api/documents/{id}/suggestions
     *
     * @param id  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getDocumentSuggestions",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetDocumentSuggestions200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/documents/{id}/suggestions",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<GetDocumentSuggestions200Response>> getDocumentSuggestions(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"storage_paths\" : [ \"\", \"\" ], \"document_types\" : [ \"\", \"\" ], \"dates\" : [ \"\", \"\" ], \"correspondents\" : [ \"\", \"\" ], \"tags\" : [ \"\", \"\" ] }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /api/documents/{id}/thumb
     *
     * @param id  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getDocumentThumb",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/pdf", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/documents/{id}/thumb",
        produces = { "application/pdf" }
    )
    
    default Mono<ResponseEntity<org.springframework.core.io.Resource>> getDocumentThumb(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /api/document_types
     *
     * @param page  (optional)
     * @param fullPerms  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getDocumentTypes",
        tags = { "DocumentTypes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetDocumentTypes200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/document_types",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<GetDocumentTypes200Response>> getDocumentTypes(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "full_perms", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "full_perms", required = false) Boolean fullPerms,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"next\" : 6, \"all\" : [ 5, 5 ], \"previous\" : 1, \"count\" : 0, \"results\" : [ { \"owner\" : 9, \"matching_algorithm\" : 2, \"document_count\" : 7, \"is_insensitive\" : true, \"permissions\" : { \"view\" : { \"groups\" : [ \"\", \"\" ], \"users\" : [ \"\", \"\" ] }, \"change\" : { \"groups\" : [ \"\", \"\" ], \"users\" : [ \"\", \"\" ] } }, \"name\" : \"name\", \"match\" : \"match\", \"id\" : 5, \"slug\" : \"slug\" }, { \"owner\" : 9, \"matching_algorithm\" : 2, \"document_count\" : 7, \"is_insensitive\" : true, \"permissions\" : { \"view\" : { \"groups\" : [ \"\", \"\" ], \"users\" : [ \"\", \"\" ] }, \"change\" : { \"groups\" : [ \"\", \"\" ], \"users\" : [ \"\", \"\" ] } }, \"name\" : \"name\", \"match\" : \"match\", \"id\" : 5, \"slug\" : \"slug\" } ] }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /api/documents
     *
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param query  (optional)
     * @param ordering  (optional)
     * @param tagsIdAll  (optional)
     * @param documentTypeId  (optional)
     * @param storagePathIdIn  (optional)
     * @param correspondentId  (optional)
     * @param truncateContent  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getDocuments",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetDocuments200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/documents",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<GetDocuments200Response>> getDocuments(
        @Parameter(name = "Page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "Page", required = false) Integer page,
        @Parameter(name = "page_size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false) Integer pageSize,
        @Parameter(name = "query", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "query", required = false) String query,
        @Parameter(name = "ordering", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "ordering", required = false) String ordering,
        @Parameter(name = "tags__id__all", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "tags__id__all", required = false) List<Integer> tagsIdAll,
        @Parameter(name = "document_type__id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "document_type__id", required = false) Integer documentTypeId,
        @Parameter(name = "storage_path__id__in", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "storage_path__id__in", required = false) Integer storagePathIdIn,
        @Parameter(name = "correspondent__id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "correspondent__id", required = false) Integer correspondentId,
        @Parameter(name = "truncate_content", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "truncate_content", required = false) Boolean truncateContent,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"next\" : 6, \"all\" : [ 5, 5 ], \"previous\" : 1, \"count\" : 0, \"results\" : [ { \"owner\" : 4, \"user_can_change\" : true, \"archive_serial_number\" : 2, \"notes\" : [ { \"note\" : \"note\", \"created\" : \"created\", \"document\" : 1, \"id\" : 7, \"user\" : 1 }, { \"note\" : \"note\", \"created\" : \"created\", \"document\" : 1, \"id\" : 7, \"user\" : 1 } ], \"added\" : \"added\", \"created\" : \"created\", \"title\" : \"title\", \"content\" : \"content\", \"tags\" : [ 3, 3 ], \"storage_path\" : 9, \"archived_file_name\" : \"archived_file_name\", \"modified\" : \"modified\", \"correspondent\" : 2, \"original_file_name\" : \"original_file_name\", \"id\" : 5, \"created_date\" : \"created_date\", \"document_type\" : 7 }, { \"owner\" : 4, \"user_can_change\" : true, \"archive_serial_number\" : 2, \"notes\" : [ { \"note\" : \"note\", \"created\" : \"created\", \"document\" : 1, \"id\" : 7, \"user\" : 1 }, { \"note\" : \"note\", \"created\" : \"created\", \"document\" : 1, \"id\" : 7, \"user\" : 1 } ], \"added\" : \"added\", \"created\" : \"created\", \"title\" : \"title\", \"content\" : \"content\", \"tags\" : [ 3, 3 ], \"storage_path\" : 9, \"archived_file_name\" : \"archived_file_name\", \"modified\" : \"modified\", \"correspondent\" : 2, \"original_file_name\" : \"original_file_name\", \"id\" : 5, \"created_date\" : \"created_date\", \"document_type\" : 7 } ] }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /api/groups
     *
     * @param page  (optional)
     * @param pageSize  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getGroups",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetGroups200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/groups",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<GetGroups200Response>> getGroups(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "page_size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false) Integer pageSize,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"next\" : 6, \"all\" : [ \"\", \"\" ], \"previous\" : 1, \"count\" : 0, \"results\" : [ \"\", \"\" ] }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /api/logs/{id}
     *
     * @param id  (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getLog",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/logs/{id}",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<Flux<String>>> getLog(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "[ \"\", \"\" ]";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /api/logs
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getLogs",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/logs",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<Flux<String>>> getLogs(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "[ \"\", \"\" ]";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /api/saved_views
     *
     * @param page  (optional)
     * @param pageSize  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getSavedViews",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetSavedViews200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/saved_views",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<GetSavedViews200Response>> getSavedViews(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "page_size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false) Integer pageSize,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"next\" : 6, \"all\" : [ 5, 5 ], \"previous\" : 1, \"count\" : 0, \"results\" : [ { \"owner\" : { \"is_superuser\" : true, \"is_active\" : true, \"user_permissions\" : [ 9, 9 ], \"is_staff\" : true, \"last_login\" : \"last_login\", \"last_name\" : \"last_name\", \"groups\" : [ \"\", \"\" ], \"password\" : \"password\", \"id\" : 7, \"date_joined\" : \"date_joined\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"username\" : \"username\" }, \"user_can_change\" : true, \"sort_field\" : \"sort_field\", \"show_on_dashboard\" : true, \"name\" : \"name\", \"show_in_sidebar\" : true, \"filter_rules\" : [ { \"rule_type\" : 2, \"value\" : \"value\" }, { \"rule_type\" : 2, \"value\" : \"value\" } ], \"sort_reverse\" : true, \"id\" : 5 }, { \"owner\" : { \"is_superuser\" : true, \"is_active\" : true, \"user_permissions\" : [ 9, 9 ], \"is_staff\" : true, \"last_login\" : \"last_login\", \"last_name\" : \"last_name\", \"groups\" : [ \"\", \"\" ], \"password\" : \"password\", \"id\" : 7, \"date_joined\" : \"date_joined\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"username\" : \"username\" }, \"user_can_change\" : true, \"sort_field\" : \"sort_field\", \"show_on_dashboard\" : true, \"name\" : \"name\", \"show_in_sidebar\" : true, \"filter_rules\" : [ { \"rule_type\" : 2, \"value\" : \"value\" }, { \"rule_type\" : 2, \"value\" : \"value\" } ], \"sort_reverse\" : true, \"id\" : 5 } ] }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /api/storage_paths
     *
     * @param page  (optional)
     * @param fullPerms  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getStoragePaths",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetStoragePaths200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/storage_paths",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<GetStoragePaths200Response>> getStoragePaths(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "full_perms", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "full_perms", required = false) Boolean fullPerms,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"next\" : true, \"all\" : [ 6, 6 ], \"previous\" : true, \"count\" : 0, \"results\" : [ { \"owner\" : 2, \"path\" : \"path\", \"matching_algorithm\" : 5, \"document_count\" : 5, \"is_insensitive\" : true, \"permissions\" : { \"view\" : { \"groups\" : [ \"\", \"\" ], \"users\" : [ 7, 7 ] }, \"change\" : { \"groups\" : [ \"\", \"\" ], \"users\" : [ 7, 7 ] } }, \"name\" : \"name\", \"match\" : \"match\", \"id\" : 1, \"slug\" : \"slug\" }, { \"owner\" : 2, \"path\" : \"path\", \"matching_algorithm\" : 5, \"document_count\" : 5, \"is_insensitive\" : true, \"permissions\" : { \"view\" : { \"groups\" : [ \"\", \"\" ], \"users\" : [ 7, 7 ] }, \"change\" : { \"groups\" : [ \"\", \"\" ], \"users\" : [ 7, 7 ] } }, \"name\" : \"name\", \"match\" : \"match\", \"id\" : 1, \"slug\" : \"slug\" } ] }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /api/tags
     *
     * @param page  (optional)
     * @param fullPerms  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getTags",
        tags = { "Tags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetTags200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/tags",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<GetTags200Response>> getTags(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "full_perms", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "full_perms", required = false) Boolean fullPerms,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"next\" : 6, \"all\" : [ 5, 5 ], \"previous\" : 1, \"count\" : 0, \"results\" : [ { \"owner\" : 9, \"matching_algorithm\" : 2, \"document_count\" : 7, \"color\" : \"color\", \"is_insensitive\" : true, \"permissions\" : { \"view\" : { \"groups\" : [ \"\", \"\" ], \"users\" : [ \"\", \"\" ] }, \"change\" : { \"groups\" : [ \"\", \"\" ], \"users\" : [ \"\", \"\" ] } }, \"name\" : \"name\", \"match\" : \"match\", \"id\" : 5, \"text_color\" : \"text_color\", \"is_inbox_tag\" : true, \"slug\" : \"slug\" }, { \"owner\" : 9, \"matching_algorithm\" : 2, \"document_count\" : 7, \"color\" : \"color\", \"is_insensitive\" : true, \"permissions\" : { \"view\" : { \"groups\" : [ \"\", \"\" ], \"users\" : [ \"\", \"\" ] }, \"change\" : { \"groups\" : [ \"\", \"\" ], \"users\" : [ \"\", \"\" ] } }, \"name\" : \"name\", \"match\" : \"match\", \"id\" : 5, \"text_color\" : \"text_color\", \"is_inbox_tag\" : true, \"slug\" : \"slug\" } ] }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /api/tasks
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getTasks",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GetTasks200ResponseInner.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/tasks",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<Flux<GetTasks200ResponseInner>>> getTasks(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "[ { \"date_done\" : \"date_done\", \"result\" : \"result\", \"acknowledged\" : true, \"task_file_name\" : \"task_file_name\", \"date_created\" : \"date_created\", \"related_document\" : \"related_document\", \"task_id\" : \"task_id\", \"id\" : 0, \"type\" : \"type\", \"status\" : \"status\" }, { \"date_done\" : \"date_done\", \"result\" : \"result\", \"acknowledged\" : true, \"task_file_name\" : \"task_file_name\", \"date_created\" : \"date_created\", \"related_document\" : \"related_document\", \"task_id\" : \"task_id\", \"id\" : 0, \"type\" : \"type\", \"status\" : \"status\" } ]";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * POST /api/token
     *
     * @param userInfo  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getToken",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/token",
        consumes = { "application/json", "text/json", "application/*+json" }
    )
    
    default Mono<ResponseEntity<Void>> getToken(
        @Parameter(name = "UserInfo", description = "") @Valid @RequestBody(required = false) Mono<UserInfo> userInfo,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(userInfo).then(Mono.empty());

    }


    /**
     * GET /api/ui_settings
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getUISettings",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetUISettings200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/ui_settings",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<GetUISettings200Response>> getUISettings(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"settings\" : { \"update_checking\" : { \"backend_setting\" : \"backend_setting\" } }, \"permissions\" : [ \"permissions\", \"permissions\" ], \"display_name\" : \"display_name\", \"user\" : { \"is_superuser\" : true, \"groups\" : [ \"\", \"\" ], \"id\" : 0, \"username\" : \"username\" } }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /api/users
     *
     * @param page  (optional)
     * @param pageSize  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getUsers",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetUsers200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/users",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<GetUsers200Response>> getUsers(
        @Parameter(name = "page", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false) Integer page,
        @Parameter(name = "page_size", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_size", required = false) Integer pageSize,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"next\" : 6, \"all\" : [ 5, 5 ], \"previous\" : 1, \"count\" : 0, \"results\" : [ { \"is_active\" : true, \"is_superuser\" : true, \"user_permissions\" : [ \"\", \"\" ], \"is_staff\" : true, \"last_name\" : \"last_name\", \"groups\" : [ \"\", \"\" ], \"password\" : \"password\", \"id\" : 5, \"date_joined\" : \"date_joined\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"username\" : \"username\", \"inherited_permissions\" : [ \"inherited_permissions\", \"inherited_permissions\" ] }, { \"is_active\" : true, \"is_superuser\" : true, \"user_permissions\" : [ \"\", \"\" ], \"is_staff\" : true, \"last_name\" : \"last_name\", \"groups\" : [ \"\", \"\" ], \"password\" : \"password\", \"id\" : 5, \"date_joined\" : \"date_joined\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"username\" : \"username\", \"inherited_permissions\" : [ \"inherited_permissions\", \"inherited_permissions\" ] } ] }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * POST /api
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "root",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api"
    )
    
    default Mono<ResponseEntity<Void>> root(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * POST /api/documents/selection_data
     *
     * @param selectionDataRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "selectionData",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SelectionData200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/documents/selection_data",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<SelectionData200Response>> selectionData(
        @Parameter(name = "SelectionDataRequest", description = "") @Valid @RequestBody(required = false) Mono<SelectionDataRequest> selectionDataRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"selected_storage_paths\" : [ { \"document_count\" : 6, \"id\" : 0 }, { \"document_count\" : 6, \"id\" : 0 } ], \"selected_document_types\" : [ { \"document_count\" : 6, \"id\" : 0 }, { \"document_count\" : 6, \"id\" : 0 } ], \"selected_correspondents\" : [ { \"document_count\" : 6, \"id\" : 0 }, { \"document_count\" : 6, \"id\" : 0 } ], \"selected_tags\" : [ { \"document_count\" : 6, \"id\" : 0 }, { \"document_count\" : 6, \"id\" : 0 } ] }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(selectionDataRequest).then(Mono.empty());

    }


    /**
     * GET /api/statistics
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "statistics",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Statistics200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/statistics",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<Statistics200Response>> statistics(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"document_file_type_counts\" : [ { \"mime_type\" : \"mime_type\", \"mime_type_count\" : 5 }, { \"mime_type\" : \"mime_type\", \"mime_type_count\" : 5 } ], \"documents_inbox\" : 6, \"inbox_tag\" : 1, \"documents_total\" : 0, \"character_count\" : 5 }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * PUT /api/correspondents/{id}
     *
     * @param id  (required)
     * @param updateCorrespondentRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "updateCorrespondent",
        tags = { "Correspondents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateCorrespondent200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/correspondents/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<UpdateCorrespondent200Response>> updateCorrespondent(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "UpdateCorrespondentRequest", description = "") @Valid @RequestBody(required = false) Mono<UpdateCorrespondentRequest> updateCorrespondentRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"owner\" : 5, \"matching_algorithm\" : 6, \"user_can_change\" : true, \"document_count\" : 1, \"is_insensitive\" : true, \"name\" : \"name\", \"match\" : \"match\", \"id\" : 0, \"last_correspondence\" : 5, \"slug\" : \"slug\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(updateCorrespondentRequest).then(Mono.empty());

    }


    /**
     * PUT /api/documents/{id}
     *
     * @param id  (required)
     * @param updateDocumentRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "updateDocument",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateDocument200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/documents/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<UpdateDocument200Response>> updateDocument(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "UpdateDocumentRequest", description = "") @Valid @RequestBody(required = false) Mono<UpdateDocumentRequest> updateDocumentRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"owner\" : 7, \"user_can_change\" : true, \"archive_serial_number\" : 2, \"notes\" : [ \"\", \"\" ], \"added\" : \"added\", \"created\" : \"created\", \"title\" : \"title\", \"content\" : \"content\", \"tags\" : [ 5, 5 ], \"storage_path\" : 5, \"archived_file_name\" : \"archived_file_name\", \"modified\" : \"modified\", \"correspondent\" : 6, \"original_file_name\" : \"original_file_name\", \"id\" : 0, \"created_date\" : \"created_date\", \"document_type\" : 1 }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(updateDocumentRequest).then(Mono.empty());

    }


    /**
     * PUT /api/document_types/{id}
     *
     * @param id  (required)
     * @param updateDocumentTypeRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "updateDocumentType",
        tags = { "DocumentTypes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateDocumentType200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/document_types/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<UpdateDocumentType200Response>> updateDocumentType(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "UpdateDocumentTypeRequest", description = "") @Valid @RequestBody(required = false) Mono<UpdateDocumentTypeRequest> updateDocumentTypeRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"owner\" : 5, \"matching_algorithm\" : 6, \"user_can_change\" : true, \"document_count\" : 1, \"is_insensitive\" : true, \"name\" : \"name\", \"match\" : \"match\", \"id\" : 0, \"slug\" : \"slug\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(updateDocumentTypeRequest).then(Mono.empty());

    }


    /**
     * PUT /api/groups/{id}
     *
     * @param id  (required)
     * @param updateGroupRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "updateGroup",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateGroup200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/groups/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<UpdateGroup200Response>> updateGroup(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "UpdateGroupRequest", description = "") @Valid @RequestBody(required = false) Mono<UpdateGroupRequest> updateGroupRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"permissions\" : [ \"permissions\", \"permissions\" ], \"name\" : \"name\", \"id\" : 0 }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(updateGroupRequest).then(Mono.empty());

    }


    /**
     * PUT /api/storage_paths/{id}
     *
     * @param id  (required)
     * @param updateStoragePathRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "updateStoragePath",
        tags = { "Config" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateStoragePath200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/storage_paths/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<UpdateStoragePath200Response>> updateStoragePath(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "UpdateStoragePathRequest", description = "") @Valid @RequestBody(required = false) Mono<UpdateStoragePathRequest> updateStoragePathRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"owner\" : 5, \"path\" : \"path\", \"matching_algorithm\" : 6, \"user_can_change\" : true, \"document_count\" : 1, \"is_insensitive\" : true, \"name\" : \"name\", \"match\" : \"match\", \"id\" : 0, \"slug\" : \"slug\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(updateStoragePathRequest).then(Mono.empty());

    }


    /**
     * PUT /api/tags/{id}
     *
     * @param id  (required)
     * @param updateTagRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "updateTag",
        tags = { "Tags" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateTag200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/tags/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<UpdateTag200Response>> updateTag(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "UpdateTagRequest", description = "") @Valid @RequestBody(required = false) Mono<UpdateTagRequest> updateTagRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"owner\" : 5, \"matching_algorithm\" : 6, \"user_can_change\" : true, \"document_count\" : 1, \"color\" : \"color\", \"is_insensitive\" : true, \"name\" : \"name\", \"match\" : \"match\", \"id\" : 0, \"text_color\" : \"text_color\", \"is_inbox_tag\" : true, \"slug\" : \"slug\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(updateTagRequest).then(Mono.empty());

    }


    /**
     * PUT /api/users/{id}
     *
     * @param id  (required)
     * @param updateUserRequest  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "updateUser",
        tags = { "Login" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetUsers200ResponseResultsInner.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/users/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<GetUsers200ResponseResultsInner>> updateUser(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "UpdateUserRequest", description = "") @Valid @RequestBody(required = false) Mono<UpdateUserRequest> updateUserRequest,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"is_active\" : true, \"is_superuser\" : true, \"user_permissions\" : [ \"\", \"\" ], \"is_staff\" : true, \"last_name\" : \"last_name\", \"groups\" : [ \"\", \"\" ], \"password\" : \"password\", \"id\" : 5, \"date_joined\" : \"date_joined\", \"first_name\" : \"first_name\", \"email\" : \"email\", \"username\" : \"username\", \"inherited_permissions\" : [ \"inherited_permissions\", \"inherited_permissions\" ] }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(updateUserRequest).then(Mono.empty());

    }


    /**
     * POST /api/documents/post_document
     *
     * @param title  (optional)
     * @param created  (optional)
     * @param documentType  (optional)
     * @param tags  (optional)
     * @param correspondent  (optional)
     * @param document  (optional)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "uploadDocument",
        tags = { "Documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/documents/post_document",
        consumes = { "multipart/form-data" }
    )
    
    default Mono<ResponseEntity<Void>> uploadDocument(
        @Parameter(name = "title", description = "") @Valid @RequestPart(value = "title", required = false) String title,
        @Parameter(name = "created", description = "") @Valid @RequestPart(value = "created", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime created,
        @Parameter(name = "document_type", description = "") @Valid @RequestPart(value = "document_type", required = false) Integer documentType,
        @Parameter(name = "tags", description = "") @Valid @RequestPart(value = "tags", required = false) List<Integer> tags,
        @Parameter(name = "correspondent", description = "") @Valid @RequestPart(value = "correspondent", required = false) Integer correspondent,
        @Parameter(name = "document", description = "") @RequestPart(value = "document", required = false) List<Flux<Part>> document,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }

}
